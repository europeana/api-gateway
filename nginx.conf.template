worker_processes auto;
daemon off;

error_log stderr warn;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}

http {
    charset utf-8;
    # EA-2236: Disable access logs
    access_log off;
    default_type application/octet-stream;
    include mime.types;
    sendfile on;

    tcp_nodelay on;
    tcp_nopush on;
    keepalive_timeout 30;

    # Note that for upstream servers all IP addresses/services need to be available on start-up!
    upstream annotation_api {
        keepalive 10;
        server ${ANNOTATION_API_HOST};
    }

    upstream entity_api {
        keepalive 10;
        server ${ENTITY_API_HOST};
    }

    upstream entity_management {
        keepalive 10;
        server ${ENTITY_MANAGEMENT_HOST};
    }

    upstream fulltext_api {
        keepalive 10;
        server ${FULLTEXT_API_HOST};
    }

    upstream manifest_api {
        keepalive 10;
        server ${MANIFEST_API_HOST};
    }

    upstream newspaper_api {
        keepalive 10;
        server ${NEWSPAPER_API_HOST};
    }

    upstream oai_record {
        keepalive 10;
        server ${OAI_RECORD_HOST};
    }

    upstream recommendation_api {
        keepalive 10;
        server ${RECOMMENDATION_API_HOST};
    }

    upstream search_api {
        keepalive 10;
        server ${SEARCH_API_HOST};
    }

    upstream set_api {
        keepalive 10;
        server ${SET_API_HOST};
    }

    upstream thumbnail_api {
        keepalive 10;
        server ${THUMBNAIL_API_HOST};
    }

    upstream translation_api {
        keepalive 10;
        # Translation API enforces https
        server ${TRANSLATION_API_HOST}:443;
    }

    upstream embedding_apis {
        keepalive 10;
        # We'll not only specify server name using env variables but also settings
        # This way we can mark a server as down (for maintenance) in a deployment job
        server ${EMBEDDING_SERVER1_SETTINGS};
        server ${EMBEDDING_SERVER2_SETTINGS};
    }


    server {
        listen 80 default_server;
        root /usr/share/nginx/html;
        index index.html;

        # HTTPS enforcement should be done within Kubernetes ingress
        # "upstream" servers do not use resolver settings by default (paid option), so we proxy directly to the urls
        #resolver ${RESOLVER_SETTINGS};

        add_header Link "<http://creativecommons.org/publicdomain/zero/1.0/>;rel=license";

        include nginx.conf.d/*.conf;

        # Redirect root
        location = / {
            return 302 ${ROOT_REDIRECT_URL};
        }

        # Used by Kubernetes health checks
        location /nginx-health {
            default_type application/json;
            return 200 '{"status":"healthy"}';
        }

        ## ----- Search & Record API -----

        # Old /api/v2/record and search.json requests
        location ~ ^/api/(.*) {
            rewrite ^/api/(.*)$ /api/$1 break;
            proxy_set_header Host ${SEARCH_API_HOST};
            proxy_pass http://search_api;
        }

        # Redirect old thumbnail url format
        #    Feb 2019 - about 1000 requests a month are still done directly to api (and all of them fail with 500 or 404)
        #    Nov 2019 - still about 1000 requests per month, most return 500 or 404, a few return 301
        #    Apr 2024 - about 25 requests per month, we can start deprecating this now
        #location = /api/image {
        #    return 301 https://$host/api/v2/thumbnail-by-url.json$is_args$args;
        #}

        # Recommendation API for records (alternative path, has to be defined before Search & Record)
        location ~ ^/record/(v2/)?(.*)/recommend {
            proxy_set_header Host ${RECOMMENDATION_API_HOST};
            proxy_pass http://recommendation_api/recommend/record/$2$is_args$args;
        }

        # Search API
        location ~ ^/record/(v2/)?(open)?search(.*) {
            rewrite ^/record/(v2/)?(open)?search(.*)$ /api/v2/$2search$3 break;
            proxy_set_header Host ${SEARCH_API_HOST};
            proxy_pass http://search_api;
        }

        # Record API
        location ~ ^/record/(v2/)?(.*) {
            rewrite  ^/record/(v2/)?(.*)$ /api/v2/record/$2 break;
            proxy_set_header Host ${SEARCH_API_HOST};
            proxy_pass http://search_api;
        }

        # Always enable CORS for Search & Record API Swagger endpoint (as bug fix)
        location = /record/api-docs {
            proxy_set_header Host ${SEARCH_API_HOST};
            proxy_hide_header Access-Control-Allow-Origin;
            add_header Access-Control-Allow-Origin "*";
            proxy_pass http://search_api/api/api-docs;
        }

        ## ----- Thumbnail API -----

        # Thumbnail API v2 (old style)
        location = /api/v2/thumbnail-by-url.json {
            # Thumbnails are JPEGs; no need to gzip them
            gzip off;
            proxy_set_header Host ${THUMBNAIL_API_HOST};
            proxy_pass http://thumbnail_api;
        }

        # Thumbnail API v2 (new style)
        location = /thumbnail/v2/url.json {
            # Thumbnails are JPEGs; no need to gzip them
            gzip off;
            proxy_set_header Host ${THUMBNAIL_API_HOST};
            proxy_pass http://thumbnail_api/api/v2/thumbnail-by-url.json$is_args$args;
        }

        location ~ /thumbnail/v2/(.*) {
            # To make sure incorrect v2 requests are not sent to v3
            return 404;
        }

        # Thumbnail API v3
        location ~ /thumbnail/(v3/)?(.*) {
            # Thumbnails are JPEGs; no need to gzip them
            gzip off;
            proxy_set_header Host ${THUMBNAIL_API_HOST};
            proxy_pass http://thumbnail_api/thumbnail/v3/$2$is_args$args;
        }

        ## ----- OAI-PMH -----

        # OAI-PMH requests
        location = /oai/record {
            proxy_set_header Host ${OAI_RECORD_HOST};
            proxy_pass http://oai_record/oai/$is_args$args;
        }

        # OAI-PMH index page
        location = /oai/record/ {
            proxy_set_header Host ${OAI_RECORD_HOST};
            proxy_pass http://oai_record/index.html;
        }

        # Change all OAI-PMH .shtml form pages to .html
        location ~ ^/oai/record/(.*)\.shtml {
            return 301 https://$host/oai/record/$1.html;
        }

        # OAI-PMH query forms
        location ~ ^/oai/record/(.*)\.html {
            proxy_set_header Host ${OAI_RECORD_HOST};
            proxy_pass http://oai_record/$1.html;
        }

        ## ----- The rest -----

        # Annotation API
        location ~ ^/annotation/(.*) {
            proxy_set_header Host ${ANNOTATION_API_HOST};
            proxy_pass http://annotation_api/annotation/$1$is_args$args;
        }

        # Recommendation API for entities (alternative path, has to be defined before /entity/* route)
        location ~ ^/entity/(.*)/recommend {
            proxy_set_header Host ${RECOMMENDATION_API_HOST};
            proxy_pass http://recommendation_api/recommend/entity/$1$is_args$args;
        }

        # Entity - search, resolve and suggest are routed to Entity API
        location ~ ^/entity/(search|suggest|resolve|enrich|stats)(.*) {
            proxy_set_header Host ${ENTITY_API_HOST};
            proxy_pass http://entity_api/entity/$1$2$is_args$args;
        }

        # Entity - all other requests go to Entity Management
        location ~ ^/entity/(.*) {
            proxy_set_header Host ${ENTITY_MANAGEMENT_HOST};
            proxy_pass http://entity_management/entity/$1$is_args$args;
        }

        # Manifest API
        location ~ ^/presentation/(.*)/manifest$ {
            proxy_set_header Host ${MANIFEST_API_HOST};
            proxy_pass http://manifest_api/presentation/$1/manifest$is_args$args;
        }

        # Newspaper search (has to be defined before fulltext/* route)
        location = /fulltext/search.json {
            proxy_set_header Host ${NEWSPAPER_API_HOST};
            proxy_pass http://newspaper_api/api/v2/search.json$is_args$args;
        }

        # Fulltext API
        location ~ ^/(fulltext|presentation)/(.*) {
            proxy_set_header Host ${FULLTEXT_API_HOST};
            proxy_pass http://fulltext_api/presentation/$2$is_args$args;
        }

        # Recommendation API
        location ~ ^/recommend/(.*) {
            proxy_set_header Host ${RECOMMENDATION_API_HOST};
            proxy_pass http://recommendation_api/recommend/$1$is_args$args;
        }

        # Recommendation API for sets (alternative path, has to be defined before /set/* route)
        location ~ ^/set/(.*)/recommend {
            proxy_set_header Host ${RECOMMENDATION_API_HOST};
            proxy_pass http://recommendation_api/recommend/set/$1$is_args$args;
        }

        # Sets API
        location ~ ^/set/(.*) {
            proxy_set_header Host ${SET_API_HOST};
            proxy_pass http://set_api/set/$1$is_args$args;
        }

        # Translation API
        location ~* ^/translation/(.*) {
            proxy_set_header Host ${TRANSLATION_API_HOST};
            proxy_pass https://translation_api/$1;
        }

        # Embedding API (load balanced!)
        location ~* ^/embedding/(.*) {
            proxy_set_header Host ${EMBEDDING_API_HOST};

            # No load balancing algorithm defined, so by default round-robin is used
            proxy_pass http://embedding_apis/embedding_api/$1;

            # Send to next server in list in case of errors
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        ## ----- Consoles and attribution -----

        location ~* ^/console/(record|iiif|annotation|thumbnail|ld|search|translation|entity|oai|set)$ {
            return 307 https://$host/console/index.html?url=docs/v3/$1.json;
        }

        # Set CORS Headers for attribution snippet's CSS & font requests
        location ~ ^/attribution/(.*) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }
    }
}
