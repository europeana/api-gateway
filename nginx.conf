# Based on: https://raw.githubusercontent.com/cloudfoundry/nginx-buildpack/v1.0.1/fixtures/mainline/nginx.conf

worker_processes 1;
daemon off;

error_log stderr;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry 'NginxLog "$request" $status $body_bytes_sent';
  access_log /dev/stdout cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  sendfile on;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - 8080

  server {
    listen {{port}};
    root public;
    index index.html;

    # Enforce SSL
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }

    resolver {{env "RESOLVER_ADDRESS"}};

    add_header Link "<http://creativecommons.org/publicdomain/zero/1.0/>;rel=license";

    include nginx.conf.d/*.conf;

    # Redirect root
    location = / {
      return 302 {{env "ROOT_REDIRECT_URL"}};
    }

    # Search API
    location ~ ^/(.*) {
      proxy_pass https://{{env "SEARCH_API_HOST"}}/api/$1$is_args$args;

      location ~ ^/api-docs/ {
        add_header Access-Control-Allow-Origin "*";
      }
    }

    # Thumbnail API
    location = /v2/thumbnail-by-url.json {
      # Thumbnails are JPEGs; do not gzip them.
      gzip off;
      proxy_pass https://{{env "THUMBNAIL_API_HOST"}};
    }

    # Old image URLs
    location = /image {
      return 301 /v2/thumbnail-by-url.json$is_args$args;
    }

    # Annotation API
    location ~ ^/annotations/(.*) {
      proxy_pass https://{{env "ANNOTATION_API_HOST"}}/annotation/$1$is_args$args;
    }

    # Entity API
    location ~ ^/entities/(.*) {
      proxy_pass https://{{env "ENTITY_API_HOST"}}/entity/$1$is_args$args;
    }

    # Fulltext API
    location ~ ^/fulltext/(.*) {
      proxy_pass https://{{env "FULLTEXT_API_HOST"}}/presentation/$1$is_args$args;
    }

    # Sets API
    location ~ ^/sets/(.*) {
      proxy_pass https://{{env "SET_API_HOST"}}/set/$1$is_args$args;
    }
  }
}
